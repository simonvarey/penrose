{"version":3,"file":"Simple.e498bb3c.js","sources":["../../src/fetchPathResolver.ts","../../src/Simple.tsx"],"sourcesContent":["export default async function fetchResolver(\n  path: string\n): Promise<string | undefined> {\n  const response = await fetch(path);\n  if (!response.ok) {\n    console.error(`could not fetch ${path}`);\n    return undefined;\n  }\n  return await response.text();\n}\n","import {\n  compileTrio,\n  PenroseError,\n  PenroseState,\n  prepareState,\n  RenderInteractive,\n  RenderStatic,\n  resample,\n  showError,\n  stateConverged,\n  stepState,\n  stepUntilConvergence,\n} from \"@penrose/core\";\nimport React from \"react\";\nimport fetchResolver from \"./fetchPathResolver\";\n\nexport interface SimpleProps {\n  domain: string;\n  substance: string;\n  style: string;\n  variation: string;\n  interactive?: boolean; // considered true by default\n  animate?: boolean; // considered false by default\n}\n\nexport interface SimpleState {\n  error?: PenroseError;\n}\n\nclass Simple extends React.Component<SimpleProps, SimpleState> {\n  readonly canvasRef = React.createRef<HTMLDivElement>();\n  penroseState: PenroseState | undefined = undefined;\n  timerID: number | undefined = undefined; // for animation\n\n  constructor(props: SimpleProps) {\n    super(props);\n    this.state = {\n      error: undefined,\n    };\n  }\n\n  compile = async (): Promise<void> => {\n    this.penroseState = undefined;\n    const compilerResult = compileTrio(this.props);\n    if (compilerResult.isOk()) {\n      this.penroseState = await prepareState(compilerResult.value);\n    } else {\n      this.setState({ error: compilerResult.error });\n    }\n  };\n\n  converge = async (): Promise<void> => {\n    if (this.penroseState) {\n      const stepped = stepUntilConvergence(this.penroseState);\n      if (stepped.isOk()) {\n        this.penroseState = stepped.value;\n      } else {\n        this.setState({ error: stepped.error });\n      }\n    }\n  };\n\n  tick = () => {\n    if (\n      this.props.animate &&\n      this.penroseState &&\n      !stateConverged(this.penroseState)\n    ) {\n      this.penroseState = stepState(this.penroseState, 1);\n      this.renderCanvas();\n    }\n  };\n\n  componentDidMount = async () => {\n    await this.compile();\n    if (!this.props.animate) {\n      await this.converge();\n    }\n    this.renderCanvas();\n    this.timerID = window.setInterval(() => this.tick(), 1000 / 60);\n  };\n\n  componentDidUpdate = async (prevProps: SimpleProps) => {\n    // re-compile if the programs change\n    if (\n      this.props.domain !== prevProps.domain ||\n      this.props.substance !== prevProps.substance ||\n      this.props.style !== prevProps.style\n    ) {\n      await this.compile();\n      if (!this.props.animate) {\n        await this.converge();\n      }\n      this.renderCanvas();\n    }\n\n    // update the component only if there's no error\n    // in the case of an error, they component should not attempt to re-render\n    if (this.penroseState && !this.state.error) {\n      if (\n        this.props.variation !== prevProps.variation ||\n        this.props.animate !== prevProps.animate\n      ) {\n        this.penroseState.variation = this.props.variation;\n        this.penroseState = resample(this.penroseState);\n        if (!this.props.animate) {\n          await this.converge();\n        }\n        this.renderCanvas();\n      } else if (this.props.interactive !== prevProps.interactive) {\n        this.renderCanvas();\n      }\n    }\n  };\n\n  componentWillUnmount = () => {\n    clearInterval(this.timerID);\n  };\n\n  renderCanvas = async () => {\n    if (this.canvasRef.current === null) {\n      return <div>rendering...</div>;\n    } else {\n      const node = this.canvasRef.current;\n      if (this.penroseState) {\n        const renderedState: SVGSVGElement = await (this.props.interactive ===\n        false\n          ? RenderStatic(this.penroseState, fetchResolver)\n          : RenderInteractive(\n              this.penroseState,\n              async (newState) => {\n                this.penroseState = newState;\n                if (!this.props.animate) {\n                  await this.converge();\n                }\n                this.renderCanvas();\n              },\n              fetchResolver\n            ));\n        if (node.firstChild !== null) {\n          node.replaceChild(renderedState, node.firstChild);\n        } else {\n          node.appendChild(renderedState);\n        }\n      } else {\n        console.log(\"state is undefined\");\n      }\n    }\n  };\n\n  render = () => {\n    const { error } = this.state;\n    return (\n      <div style={{ width: \"100%\", height: \"100%\" }}>\n        {!error && (\n          <div style={{ width: \"100%\", height: \"100%\" }} ref={this.canvasRef} />\n        )}\n        {error && (\n          <div style={{ padding: \"1em\", height: \"100%\" }}>\n            <div style={{ fontWeight: 700 }}>1 error:</div>\n            <div style={{ fontFamily: \"monospace\" }}>\n              {showError(error)\n                .toString()\n                .split(\"\\n\")\n                .map((line: string, key: number) => (\n                  <p key={`err-ln-${key}`} style={{ margin: 0 }}>\n                    {line}\n                  </p>\n                ))}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nexport { Simple };\n"],"names":[],"mappings":"gYACE,EAC6B,MACvB,GAAW,KAAM,OAAM,MACzB,CAAC,EAAS,GAAI,SACR,MAAM,mBAAmB,kBAG5B,MAAM,GAAS,OCqBxB;"}